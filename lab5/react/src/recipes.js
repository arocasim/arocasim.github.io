import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getAuth, onAuthStateChanged } from 'firebase/auth'; // üî• –î–æ–¥–∞—î–º–æ Firebase –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
import { doc, getDoc } from 'firebase/firestore';
import { db } from './firebase-config'; // üî• –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±–∞–∑—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
import './App.css';

const auth = getAuth();

const Recipes = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [recipe, setRecipe] = useState(null);
  const [comments, setComments] = useState([]);
  const [name, setName] = useState('');
  const [commentText, setCommentText] = useState('');
  const [currentUser, setCurrentUser] = useState(null); // üî• –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const [userName, setUserName] = useState(''); // üî• –°–ø—Ä–∞–≤–∂–Ω—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

  useEffect(() => {
    const fetchRecipe = async () => {
      try {
        const response = await fetch('/recipes.json');
        const data = await response.json();
        const foundRecipe = data.find(r => r.id === parseInt(id, 10));
        if (foundRecipe) {
          setRecipe(foundRecipe);
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ä–µ—Ü–µ–ø—Ç—É:', error);
      }
    };

    fetchRecipe();
  }, [id]);

  useEffect(() => {
    const savedComments = JSON.parse(localStorage.getItem(`comments_${id}`)) || [];
    setComments(savedComments);
  }, [id]);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        setCurrentUser(user);
        try {
          const userDoc = await getDoc(doc(db, "users", user.uid));
          if (userDoc.exists()) {
            const userData = userDoc.data();
            setUserName(userData.name); // üî• –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è
            setName(userData.name);      // üî• –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ —ñ–º'—è –≤ –ø–æ–ª–µ
          }
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
        }
      } else {
        setCurrentUser(null);
        setUserName('');
        setName(''); // üî• —è–∫—â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –æ—á–∏—â–∞—î–º–æ –ø–æ–ª–µ
      }
    });

    return () => unsubscribe();
  }, []);

  const handleCommentSubmit = (e) => {
    e.preventDefault();
    if (!name.trim() || !commentText.trim()) return;

    const newComment = { name, text: commentText };
    const updatedComments = [...comments, newComment];
    setComments(updatedComments);
    localStorage.setItem(`comments_${id}`, JSON.stringify(updatedComments));

    setCommentText('');
  };

  return (
    <div>
      <header>
        <h1>–î–µ—Ç–∞–ª—ñ —Ä–µ—Ü–µ–ø—Ç—É</h1>
        <button onClick={() => navigate('/')}>–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É</button>
      </header>

      {recipe ? (
        <div id="recipe-details">
          <img src={recipe.image} alt={recipe.name} />
          <h2>{recipe.name}</h2>
          <p>–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è: {recipe.time}</p>
          <h3>–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:</h3>
          <ul>
            {recipe.ingredients.map((ing, idx) => (
              <li key={idx}>{ing}</li>
            ))}
          </ul>
          <h3>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:</h3>
          <ul>
            {recipe.instructions.map((step, idx) => (
              <li key={idx}>{step}</li>
            ))}
          </ul>
        </div>
      ) : (
        <p>–†–µ—Ü–µ–ø—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</p>
      )}

      <section id="comments-section">
        <h3>–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä</h3>
        <form onSubmit={handleCommentSubmit}>
          <input
            type="text"
            placeholder="–í–∞—à–µ —ñ–º'—è"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            disabled={currentUser !== null} // üî• –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–≤—ñ–π—à–æ–≤
          />
          <textarea
            placeholder="–í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä"
            value={commentText}
            onChange={(e) => setCommentText(e.target.value)}
            required
          />
          <button type="submit">–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä</button>
        </form>

        <h3>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ:</h3>
        <div id="comments-list">
          {comments.map((c, i) => (
            <div key={i} className="comment">
              <strong>{c.name}</strong>: <p>{c.text}</p>
            </div>
          ))}
        </div>
      </section>
    </div>
  );
};

export default Recipes;
